(* ::Package:: *)

(**********************************************************)
(*                                                        *)
(*  Model for Chiral perturbation Theory at lowest order  *)
(*  Follows Scherer's conventions                         *)
(*                                                        *)
(**********************************************************)

(*
TODO:
-NOTE: earlier versions of FeynRules have a bug where del[..., m] will not work correctly unless Expand is called on its argument or the argument's head is Plus or Minus.
-NOTE: vertices with more than two mesons will be dropped below to speed up model file generation.
-Put in widths!
*)

M$ModelName = "EFT_subGeV_DM_rho";

M$Information = {
    Authors -> {"Adam Coogan", "Logan Morrison"},
    Date->"2/13/2018",
    Institutions -> {"UC Santa Cruz"},
    Emails -> {"acoogan@ucsc.edu", "loanmorr@ucsc.edu"},
    Version -> 1
};

(***** Gauge group information *****)
FeynmanGauge = True;

M$GaugeGroups = {
    U1EM == {
        Abelian -> True,
        CouplingConstant -> qe,
        GaugeBoson -> A,
        Charge -> Q
    }
};

(***** Parameter list. ALL UNITS ARE IN GeV! *****)
M$Parameters = {
    fpi == {
        ParameterType -> External,
        Value -> 0.093,
        TeX -> ComposedChar["f", "\\pi"],
        Description->"pion decay constant"
    },

    b0 == {
        ParameterType -> External,
        Description -> "mass term coefficient",
        TeX -> ComposedChar["B", "0"],
        Value -> 2.617 (* ((mpi0 + mpi)/2)^2 / (mu + md) *)
    },

    fv == {
        ParameterType -> External,
        Description -> "vector coupling F_V",
        TeX -> ComposedChar["F", "V"],
        Value -> 0.165 (* MeV *)
    },

    gv == {
        ParameterType -> External,
        Description -> "vector coupling G_V",
        TeX -> ComposedChar["G", "V"],
        Value -> 0.055 (* MeV *)
    },

    muq == {
        ParameterType -> External,
        Value -> 0.0024,
        TeX -> ComposedChar["m", "u"],
        Description->"mass of the up quark"
    },

    mdq == {
        ParameterType -> External,
        Value -> 0.0048,
        TeX -> ComposedChar["m", "d"],
        Description->"mass of the down quark"
    },

    msq == {
        ParameterType -> External,
        Value -> 0.095,
        TeX -> ComposedChar["m", "s"],
        Description->"mass of the strange quark"
    },

    (* Teta == {
        ParameterType -> External,
        Value -> -0.2007, (* -11.5 degrees *)
        TeX -> ComposedChar["\\theta", "\\eta"],
        Description -> "eta-eta prime mixing angle"
    }, *)

    alphaEM == {
        ParameterType -> External,
        Value -> 1/137.0,
        TeX -> ComposedChar["\\alpha", "EM"],
        Description -> "fine structure constant for EM"
    },

    me == {
        ParameterType -> External,
        Value -> 0.000511,
        TeX -> ComposedChar["m", "e"],
        Description -> "electron mass"
    },

    mmu == {
        ParameterType -> External,
        Value -> 0.10566,
        TeX -> ComposedChar["m", "\\mu"],
        Description -> "muon mass"
    },

    gsuu == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Suu"],
        Description -> "Scalar mediator-up quark coupling"
    },

    gsdd == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Sff"],
        Description -> "Scalar mediator-down quark coupling"
    },

    gsss == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Sff"],
        Description -> "Scalar mediator-strange quark coupling"
    },

    gsee == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Sff"],
        Description -> "Scalar mediator-electron coupling"
    },

    gsll == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Sff"],
        Description -> "Scalar mediator-lepton coupling"
    },

    gsGG == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "SGG"],
        Description -> "effective SGG coupling"
    },

    gsFF == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "SFF"],
        Description -> "effective SFF coupling"
    },

    vs == {
        ParameterType -> External,
        TeX -> ComposedChar["v", "S"],
        Description -> "vev of S"
    },

    vh == {
        ParameterType -> External,
        TeX -> ComposedChar["v", "H"],
        Description -> "Higgs vev",
        Value -> 246.0
    },

    ms == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "S"],
        Description->"mass of S"
    },

    swidth == {
        ParameterType -> External,
        TeX -> ComposedChar["\\Gamma", "S"],
        Description->"width of S"
    },

    gsxx == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "S\\chi\\chi"],
        Description -> "S\[Chi]\[Chi]C coupling"
    },

    mx == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "\\chi"],
        Description->"dark matter mass"
    },

    mrho == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "\\rho"],
        Description->"rho0 mass"
    },

    rhowidth == {
        ParameterType -> External,
        TeX -> ComposedChar["\\Gamma", "\\rho"],
        Description->"rho0 width"
    },

    ml == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "l"],
        Description->"SM fermion mass"
    },

    Vud == {
        ParameterType -> External,
        Value -> 0.974267,
        TeX -> ComposedChar["V", "ud"],
        Description -> "ud element of CKM matrix"
    },

    Vus == {
        ParameterType -> External,
        Value -> 0.225369,
        TeX -> ComposedChar["V", "us"],
        Description -> "us element of CKM matrix"
    },

    GF == {
        ParameterType -> External,
        Value -> 1.166 * 10^(-5), (* GeV^-2 *)
        TeX -> ComposedChar["G", "F"],
        Description -> "Fermi constant"
    },

    qe == {
        ParameterType -> Internal,
        Value -> Sqrt[4 Pi alphaEM],
        TeX -> "e",
        Description -> "electric coupling constant"
    },

    Lam == {
        ParameterType -> External,
        TeX -> "\\Lambda",
        Description -> "UV cutoff scale."
    }
};

(***** Particle classes list ******)
M$ClassesDescription = {
    (* Goldstones *)
    S[1] == {
        ClassName -> pi0,
        SelfConjugate -> True,
        Mass -> {mpi0, 0.13498},
        Width -> 0,
        ParticleName -> "pi0",
        TeXParticleName -> ComposedChar["\\pi", Null, "0"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "0"]
    },

    S[2] == {
        ClassName -> pim,
        SelfConjugate -> False,
        Mass -> {mpi, 0.13957},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "pim",
        AntiParticleName -> "pip",
        TeXParticleName -> ComposedChar["\\pi", Null, "-"],
        TeXAntiParticleName -> ComposedChar["\\pi", Null, "+"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[3] == {
        ClassName -> k0,
        SelfConjugate -> False,
        Mass -> {mk0, 0.49765},
        Width -> 0,
        ParticleName -> "k0",
        AntiParticleName -> "k0~",
        TeXParticleName -> ComposedChar["K", Null, "0"],
        TeXAntiParticleName -> ComposedChar["K", Null, "0", "\\bar"],
        PropagatorLabel -> ComposedChar["K", Null, "0"],
        PropagatorArrow -> Forward
    },

    S[4] == {
        ClassName -> km,
        SelfConjugate -> False,
        Mass -> {mk, 0.49367},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "km",
        AntiParticleName -> "kp",
        TeXParticleName -> ComposedChar["K", Null, "-"],
        TeXAntiParticleName -> ComposedChar["K", Null, "+"],
        PropagatorLabel -> ComposedChar["K", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[5] == {
        ClassName -> eta,
        SelfConjugate -> True,
        Mass -> {meta, 0.547862},
        Width -> 0,
        ParticleName -> "eta",
        TeXParticleName -> "\\eta",
        PropagatorLabel -> "\\eta"
    },

    (* Mediators *)
    S[7] == { (* S (scalar) *)
        ClassName -> s,
        SelfConjugate -> True,
        Width -> swidth,
        Mass -> ms,
        ParticleName -> "S"
    },

    (* Photon *)
    V[1] == {
        ClassName -> A,
        SelfConjugate -> True,
        Mass -> 0,
        Width -> 0,
        ParticleName -> "A",
        TeXParticleName -> "\\Gamma"
    },

    V[2] == {
        ClassName -> rho,
        SelfConjugate -> True,
        Mass -> mrho,
        Width -> rhowidth,
        ParticleName -> "\\rho",
        PropagatorLabel -> "\\rho"
    },

    (* SM leptons *)
    F[1] == {
        ClassName        -> vl,
        SelfConjugate    -> False,
        Mass             -> 0,
        Width            -> 0,
        QuantumNumbers   -> {LeptonNumber -> 1},
        PropagatorLabel  -> {"v"} ,
        PropagatorType   -> S,
        PropagatorArrow  -> Forward
    },

    F[2] == {
        ClassName        -> l,
        SelfConjugate    -> False,
        Mass             -> ml,
        QuantumNumbers   -> {Q -> -1, LeptonNumber -> 1},
        PropagatorLabel  -> {"l"},
        PropagatorType   -> Straight,
        PropagatorArrow  -> Forward
    },

    (* Dark matter *)
    F[3] == {
        ClassName -> x,
        SelfConjugate -> False,
        Mass -> mx,
        Width -> 0,
        ParticleName -> "x",
        AntiParticleName -> "x~",
        TeXParticleName -> "\\chi",
        TeXAntiParticleName -> ComposedChar["\\chi", Null, Null, "\\bar"],
        PropagatorLabel -> "\\chi",
        PropagatorArrow -> Forward
    }
}

(***** Gauge parameters for FeynArts *****)
GaugeXi[V[1]] = GaugeXi[A];

(* Need both of these terms to use the pip and kp field names *)
(* Note that FeynRules automatically creates the k0bar conjugate field *)
pip = anti[pim];
pipbar = pim;
kp = anti[km];
kpbar = km;

FpiExpand[expr_, n_] := Normal[Series[expr, {fpi, Infinity, n}]];

(* Mass matrix of the light quarks *)
QuarkMassMatrix = DiagonalMatrix[{muq, mdq, msq}];
(* Matrix of quark charges *)
QuarkChargeMatrix = DiagonalMatrix[{2/3, -1/3, -1/3}];


(*** Set up building blocks for the Lagrangian ***)
(* Matrix of mesons *)
(* Set eta-eta' mixing angle to 0 for now! *)
Phi = {{pi0 + eta / Sqrt[3], Sqrt[2] * pip, Sqrt[2] * kp},
        {Sqrt[2] * pim, -pi0 + eta / Sqrt[3], Sqrt[2] * k0},
        {Sqrt[2] * km, Sqrt[2] * k0bar, -2 * eta / Sqrt[3]}};

(* Golstone Matrix *)
Sigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[Phi, n], {n, 1, order}]]
];

(* Square Root of the Golstone Matrix *)
SqrtSigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[Phi / 2, n], {n, 1, order}]]
];

(* Convenient definitions *)
Sigma3 = Sigma[3];
Sigma4 = Sigma[4];
SigmaDag3 = HC[Sigma[3]];
SigmaDag4 = HC[Sigma[4]];

SqrtSigma3 = SqrtSigma[3];
SqrtSigma4 = SqrtSigma[4];
SqrtSigmaDag2 = HC[SqrtSigma[2]];
SqrtSigmaDag3 = HC[SqrtSigma[3]];
SqrtSigmaDag4 = HC[SqrtSigma[4]];

(* Define left and right handed vector fields *)
EMCurrentL[mu_] := qe * QuarkChargeMatrix * A[mu];
EMCurrentR[mu_] := qe * QuarkChargeMatrix * A[mu];

CKM := {{0, Vud, Vus}, {0, 0, 0}, {0, 0, 0}};

WeakCurrentL[m_] := 2 * Sqrt[2] * GF *  CKM * lbar . Ga[m] . ProjM . vl;

lhNoWeak[m_] := EMCurrentL[m];
rhNoWeak[m_] := EMCurrentR[m];

lh[m_] := lhNoWeak[m] + WeakCurrentL[m] + HC[WeakCurrentL[m]];
rh[m_] := rhNoWeak[m];

vmu[mu_] := 1 / 2 * (rh[mu] + lh[mu]);
amu[mu_] := 1 / 2 * (rh[mu] - lh[mu]);

(* Define covariant derivative of Sigma matrix *)
DCS[FF_, mu_] := del[FF, mu] - I * rh[mu] . FF + I * FF . lh[mu];

(* Hermitian conjugate of covariant derivative *)
HCDCS[FF_, mu_] := HC[DCS[FF, mu]];


(* Resonance matrix *)
ResonanceMatrix[mu_] := rho[mu] / Sqrt[2] * DiagonalMatrix[{1, -1, 0}];

commutator[AA_, BB_] := AA . BB - BB . AA;

(* Connection to define Resonance Covariant Derivative *)
ResConnection[m_] := Block[{derTerm1, derTerm2, curTerm1, curTerm2, tot},
    derTerm1 = 1 / 2 * SqrtSigmaDag3 . del[SqrtSigma4, m];
    curTerm1 = -I / 2 * SqrtSigmaDag4 . rhNoWeak[m] . SqrtSigma4;

    derTerm2 = 1 / 2 * SqrtSigma3 . del[SqrtSigmaDag4, m];
    curTerm2 = -I / 2 * SqrtSigma4 . lhNoWeak[m] . SqrtSigmaDag4;

    tot = derTerm1 + derTerm2 + curTerm1 + curTerm2;

    FpiExpand[tot, 2]
];

(* Resonance Field Strength *)
ResonanceFS[m_, n_] := Block[{derivTerm, connectTerm1, connectTerm2, tot},
    derivTerm = del[ResonanceMatrix[n], m] - del[ResonanceMatrix[m], n];

    (* These are already expanded to O(f^-2) *)
    connectTerm1 = commutator[ResConnection[m], ResonanceMatrix[n]];
    connectTerm2 = commutator[ResConnection[n], ResonanceMatrix[m]];

    tot = derivTerm + connectTerm1 + connectTerm2
];

(* Octet tensor current, dropping leptonic terms *)
FSRight[m_, n_] := FS[rhNoWeak, m, n];
FSLeft[m_, n_] := FS[lhNoWeak, m, n];

FSOctetLeft[mu_, nu_] := SqrtSigma4 . FSLeft[mu, nu] . SqrtSigmaDag4;
FSOctetRight[mu_, nu_] := SqrtSigmaDag4 . FSRight[mu, nu] . SqrtSigma4;
FSOctetPlus[mu_, nu_] := FSOctetLeft[mu, nu] + FSOctetRight[mu, nu];
FSOctetMinus[mu_, nu_] := FSOctetLeft[mu, nu] - FSOctetRight[mu, nu];

(* Octet meson current *)
SqrtSigmaMu[m_] := I * SqrtSigmaDag2 . DCS[Sigma4, m] . SqrtSigmaDag2;

(* J2 resonance interaction term *)
ResonanceJ2[mu_, nu_] := -fv / (2 * Sqrt[2]) * FSOctetPlus[mu, nu] -I * gv / Sqrt[2] SqrtSigmaMu[mu] . SqrtSigmaMu[nu];

(* Unphysical parameters for fpi and b0 *)
fpiT = (3 * fpi) / Sqrt[9 + (4 * gsGG * vs) / Lam];
b0T = (b0 * (9 * Lam + 4 * gsGG * vs) * (-2 * gsGG * vh * vs + 3 * Lam * (vh - gsff * vs))) / (27 * Lam^2 * vh);



(*****************************************************************)
(*****************************************************************)
(*                        Lagrangian                             *)
(*****************************************************************)
(*****************************************************************)


(*****************************************************************)
(*                        Kinetic Terms                          *)
(*****************************************************************)

(* Scalar *)
LKineticS := Block[{mu},
    1 / 2 * del[s, mu] * del[s, mu] - 1 / 2 * ms^2 * s * s
];

(* DM *)
LKineticDM := Block[{mu},
    I * (xbar . Ga[mu] . del[x, mu] - mx * xbar . x)
];

(* Mesons Kinetic Term *)
LKineticMes := Block[{mu, kinetic},
    kinetic = fpi^2 / 4 * Tr[DCS[Sigma4, mu] . HCDCS[Sigma4, mu]];
    FpiExpand[kinetic, 4]
];

(* Mesons Mass Term *)
LMassMes := b0 * fpi^2 / 2 * Tr[QuarkMassMatrix . (Sigma4 + SigmaDag4)];


(* Photon kinetic term *)
LGauge := Block[{mu, nu},
    -1 / 4 * FS[A, mu, nu] FS[A, mu, nu]
];

(* Neutrino kinetic term *)
LKineticNu := Block[{m},
    I * left[nubar] . Ga[m] . del[left[nu], m]
];

(* Photon-l interaction *)
LKineticLep := Block[{m},
    I * (lbar . Ga[m] . DC[l, m] - ml lbar . l)
];

LKineticRho := Block[{mu, nu, kinetic, mass},
    kinetic = -1 / 4 * Tr[ResonanceFS[mu, nu] . ResonanceFS[mu, nu]];
    mass = mrho^2 / 2 * Tr[ResonanceMatrix[mu] . ResonanceMatrix[mu]];
    kinetic + mass;
    FpiExpand[kinetic + mass, 2]
];

LKinetic := LKineticS + LKineticDM + LKineticMes + LMassMes + LGauge + LKineticNu +  LKineticLep + LKineticRho;



(*****************************************************************)
(*                   Interaction Terms                           *)
(*****************************************************************)

(* s-l interaction *)
LIntSLL := -gsll * s * lbar.l;

(* s-x interaction *)
LIntSXX := -gsxx * s * xbar.x;

(* Effective interaction between s and photons *)
LIntSFF := Block[{m, n},
    (alphaEM * gsFF) / (4 * Lam * Pi) * s * FS[A, m, n] * FS[A, m, n]
];

(* Interactions between s and mesons *)
LIntMesSKin := Module[{mu, coeff, kinetic, interaction},
    coeff = (fpiT^2 * gsGG) / (9 * Lam);

    kinetic = Tr[DCS[Sigma4, mu] . HCDCS[Sigma4, mu]];

    interaction = coeff * s * kinetic;

    FpiExpand[interaction, 4]
];

LIntMesSMass := Module[{coeff1, coeff2, interaction},
    coeff1 = (b0T*fpiT^2 * (2 * gsGG * vh * (9 * Lam - 4 * gsGG * vs) + 9 * gsff * Lam * (3 * Lam + 4 * gsGG * vs))) / (54 * Lam^2 * vh);

    coeff2 = (b0T * fpiT^2 * gsGG * (9 * gsff * Lam -
        2 * gsGG * vh)) / (27 * Lam^2 * vh);

    interaction = (s * coeff1 + s^2 * coeff2) * Tr[QuarkMassMatrix . (Sigma4 + SigmaDag4)];

    FpiExpand[interaction, 4]
];

(* rho-pi-pi, S-rho-gamma, S-rho-pi-pi, S-rho-pi-pi-gamma terms *)
LIntRhoMes := Module[{m, n},
    (1 + 2 gsGG / (3 vh) * (vs + s)) / mrhoT Tr[ResonanceFS[m, n] . ResonanceJ2[m, n]] // FpiExpand[#, 2]&
];

(* Contact interactions required to correct the rho propagator *)
LContactRho := Block[{m, n, term},
    term = -rhoContactCoeff (1 + 4 gsGG / (3 v) (vs + s) + (2 gsGG vs / (3 v))^2) / mrhoT^2 Tr[ResonanceJ2[m, n] . ResonanceJ2[m, n]];

    term = FpiExpand[term, 4];

    term // Series[#, {qe, 0, 1}]& // Normal
];

LInt := LIntSLL + LIntSXX + LIntSFF + LIntMesSKin + LIntMesSMass + LIntRhoMes + LContactRho;


(* Full Lagrangian *)
L := LKinetic + LInt // ReplaceAll[#, {GF -> fCounter GF}]& // Series[#, {fCounter, 0, 1}]& // Normal // ReplaceAll[#, {fCounter -> 1}]&;
