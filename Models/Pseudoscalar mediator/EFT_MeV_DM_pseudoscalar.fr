(* ::Package:: *)

(**********************************************************)
(*                                                        *)
(*  Model for Chiral perturbation Theory at lowest order  *)
(*  Follows Scherer's conventions                         *)
(*                                                        *)
(**********************************************************)

(*
TODO:
-NOTE: earlier versions of FeynRules have a bug where del[..., m] will not work correctly unless Expand is called on its argument or the argument's head is Plus or Minus.
-NOTE: vertices with more than two mesons will be dropped below to speed up model file generation.
-Put in widths!
*)

M$ModelName = "EFT_subGeV_DM_P";

M$Information = {
    Authors -> {"Adam Coogan", "Logan Morrison"},
    Date->"7/10/2018",
    Institutions -> {"UC Santa Cruz"},
    Emails -> {"acoogan@ucsc.edu", "loanmorr@ucsc.edu"},
    Version -> 1
};

(***** Gauge group information *****)
FeynmanGauge = True;

M$GaugeGroups = {
    U1EM == {
        Abelian -> True,
        CouplingConstant -> qe,
        GaugeBoson -> A,
        Charge -> Q
    }
};

(***** Parameter list. ALL UNITS ARE IN GeV! *****)
M$Parameters = {
    fpi == {
        ParameterType -> External,
        Value -> 0.093,
        TeX -> ComposedChar["f", "\\pi"],
        Description->"pion decay constant"
    },

    b0 == {
        ParameterType -> External,
        Description -> "mass term coefficient",
        TeX -> ComposedChar["B", "0"],
        Value -> 2.617 (* ((mpi0 + mpi)/2)^2 / (mu + md) *)
    },

    muq == {
        ParameterType -> External,
        Value -> 0.0024,
        TeX -> ComposedChar["m", "u"],
        Description->"mass of the up quark"
    },

    mdq == {
        ParameterType -> External,
        Value -> 0.0048,
        TeX -> ComposedChar["m", "d"],
        Description->"mass of the down quark"
    },

    msq == {
        ParameterType -> External,
        Value -> 0.095,
        TeX -> ComposedChar["m", "s"],
        Description->"mass of the strange quark"
    },

    alphaEM == {
        ParameterType -> External,
        Value -> 1/137.0,
        TeX -> ComposedChar["\\alpha", "EM"],
        Description -> "fine structure constant for EM"
    },

    me == {
        ParameterType -> External,
        Value -> 0.000511,
        TeX -> ComposedChar["m", "e"],
        Description -> "electron mass"
    },

    mmu == {
        ParameterType -> External,
        Value -> 0.10566,
        TeX -> ComposedChar["m", "\\mu"],
        Description -> "muon mass"
    },

    gpuu == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Puu"],
        Description -> "Puu coupling"
    },

    gpdd == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Pdd"],
        Description -> "Pdd coupling"
    },

    gpss == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Pss"],
        Description -> "Pss coupling"
    },

    gpll == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Pll"],
        Description -> "Pll coupling"
    },

    gpGG == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "PGG"],
        Description -> "effective PGGdual coupling"
    },

    gpFF == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "PFF"],
        Description -> "effective PFFdual coupling"
    },

    vh == {
        ParameterType -> External,
        TeX -> ComposedChar["v", "H"],
        Description -> "Higgs vev",
        Value -> 246.0
    },

    ms == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "P"],
        Description->"mass of P"
    },

    swidth == {
        ParameterType -> External,
        TeX -> ComposedChar["\\Gamma", "P"],
        Description->"width of P"
    },

    gpxx == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "P\\chi\\chi"],
        Description -> "P\[Chi]\[Chi] coupling"
    },

    mx == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "\\chi"],
        Description->"dark matter mass"
    },

    ml == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "l"],
        Description->"SM fermion mass"
    },

    GF == {
        ParameterType -> External,
        Value -> 1.166 * 10^(-5), (* GeV^-2 *)
        TeX -> ComposedChar["G", "F"],
        Description -> "Fermi constant"
    },

    qe == {
        ParameterType -> Internal,
        Value -> Sqrt[4 Pi alphaEM],
        TeX -> "e",
        Description -> "electric coupling constant"
    },
    sinbeta == {
        ParameterType -> Internal,
        TeX -> ComposedChar["Sin", "\\beta"]
    },
    cosbeta == {
        ParameterType -> Internal,
        TeX -> ComposedChar["Cos", "\\beta"]
    }
};

(***** Particle classes list ******)
M$ClassesDescription = {
    (* Goldstones *)
    S[1] == {
        ClassName -> pi0,
        SelfConjugate -> True,
        Mass -> {mpi0, 0.13498},
        Width -> 0,
        ParticleName -> "pi0",
        TeXParticleName -> ComposedChar["\\pi", Null, "0"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "0"]
    },

    S[2] == {
        ClassName -> pim,
        SelfConjugate -> False,
        Mass -> {mpi, 0.13957},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "pim",
        AntiParticleName -> "pip",
        TeXParticleName -> ComposedChar["\\pi", Null, "-"],
        TeXAntiParticleName -> ComposedChar["\\pi", Null, "+"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[3] == {
        ClassName -> k0,
        SelfConjugate -> False,
        Mass -> {mk0, 0.49765},
        Width -> 0,
        ParticleName -> "k0",
        AntiParticleName -> "k0~",
        TeXParticleName -> ComposedChar["K", Null, "0"],
        TeXAntiParticleName -> ComposedChar["K", Null, "0", "\\bar"],
        PropagatorLabel -> ComposedChar["K", Null, "0"],
        PropagatorArrow -> Forward
    },

    S[4] == {
        ClassName -> km,
        SelfConjugate -> False,
        Mass -> {mk, 0.49367},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "km",
        AntiParticleName -> "kp",
        TeXParticleName -> ComposedChar["K", Null, "-"],
        TeXAntiParticleName -> ComposedChar["K", Null, "+"],
        PropagatorLabel -> ComposedChar["K", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[5] == {
        ClassName -> eta,
        SelfConjugate -> True,
        Mass -> {meta, 0.547862},
        Width -> 0,
        ParticleName -> "eta",
        TeXParticleName -> "\\eta",
        PropagatorLabel -> "\\eta"
    },

    (* Mediators *)
    S[7] == { (* P (pseudoscalar) *)
        ClassName -> p,
        SelfConjugate -> True,
        Width -> swidth,
        Mass -> mp,
        ParticleName -> "S"
    },

    (* Photon *)
    V[1] == {
        ClassName -> A,
        SelfConjugate -> True,
        Mass -> 0,
        Width -> 0,
        ParticleName -> "A",
        TeXParticleName -> "\\Gamma"
    },

    (* SM leptons *)
    F[1] == {
        ClassName        -> vl,
        SelfConjugate    -> False,
        Mass             -> 0,
        Width            -> 0,
        QuantumNumbers   -> {LeptonNumber -> 1},
        PropagatorLabel  -> {"v"} ,
        PropagatorType   -> S,
        PropagatorArrow  -> Forward
    },

    F[2] == {
        ClassName        -> l,
        SelfConjugate    -> False,
        Mass             -> ml,
        QuantumNumbers   -> {Q -> -1, LeptonNumber -> 1},
        PropagatorLabel  -> {"l"},
        PropagatorType   -> Straight,
        PropagatorArrow  -> Forward
    },

    (* Dark matter *)
    F[3] == {
        ClassName -> x,
        SelfConjugate -> False,
        Mass -> mx,
        Width -> 0,
        ParticleName -> "x",
        AntiParticleName -> "x~",
        TeXParticleName -> "\\chi",
        TeXAntiParticleName -> ComposedChar["\\chi", Null, Null, "\\bar"],
        PropagatorLabel -> "\\chi",
        PropagatorArrow -> Forward
    },
    (* Unphysical Fields *)
    S[11] == {
        ClassName -> pi0t,
        Unphysical -> True,
        SelfConjugate -> True,
        Definitions -> {pi0t :> cosbeta * pi0 - sinbeta * p}
    },
    (* Unphysical Fields *)
    S[77] == {
        ClassName -> pt,
        Unphysical -> True,
        SelfConjugate -> True,
        Definitions -> {pt :> cosbeta * p + sinbeta * pi0}
    }
}

(***** Gauge parameters for FeynArts *****)
GaugeXi[V[1]] = GaugeXi[A];

(* Need both of these terms to use the pip and kp field names *)
(* Note that FeynRules automatically creates the k0bar conjugate field *)
pip = anti[pim];
pipbar = pim;
kp = anti[km];
kpbar = km;

FpiExpand[expr_, n_] := Normal[Series[expr, {fpi, Infinity, n}]];

(* Mass matrix of the light quarks *)
QuarkMassMatrix = DiagonalMatrix[{muq, mdq, msq}];
(* Matrix of quark charges *)
QuarkChargeMatrix = DiagonalMatrix[{2/3, -1/3, -1/3}];

(* Matrix of couplings between p and light quarks *)
PCouplingMatrix = DiagonalMatrix[{gpuu, gpdd, gpss}];


(*** Set up building blocks for the Lagrangian ***)
(* Matrix of mesons *)
(* Set eta-eta' mixing angle to 0 for now! *)
Phi = {{pi0t + eta / Sqrt[3], Sqrt[2] * pip, Sqrt[2] * kp},
        {Sqrt[2] * pim, -pi0t + eta / Sqrt[3], Sqrt[2] * k0},
        {Sqrt[2] * km, Sqrt[2] * k0bar, -2 * eta / Sqrt[3]}};

(* Golstone Matrix *)
Sigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[Phi, n], {n, 1, order}]]
];

(* Square Root of the Golstone Matrix *)
SqrtSigma[order_] := Module[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[Phi / 2, n], {n, 1, order}]]
];

(* Convenient definitions *)
Sigma2 = Sigma[2];
Sigma3 = Sigma[3];
Sigma4 = Sigma[4];
SigmaDag2 = HC[Sigma[2]];
SigmaDag3 = HC[Sigma[3]];
SigmaDag4 = HC[Sigma[4]];

SqrtSigma3 = SqrtSigma[3];
SqrtSigma4 = SqrtSigma[4];
SqrtSigmaDag2 = HC[SqrtSigma[2]];
SqrtSigmaDag3 = HC[SqrtSigma[3]];
SqrtSigmaDag4 = HC[SqrtSigma[4]];

(* Define left and right handed vector fields *)
EMCurrentL[mu_] := qe * QuarkChargeMatrix * A[mu];
EMCurrentR[mu_] := qe * QuarkChargeMatrix * A[mu];

lhNoWeak[m_] := EMCurrentL[m];
rhNoWeak[m_] := EMCurrentR[m];

lh[m_] := lhNoWeak[m];
rh[m_] := rhNoWeak[m];

vmu[mu_] := 1 / 2 * (rh[mu] + lh[mu]);
amu[mu_] := 1 / 2 * (rh[mu] - lh[mu]);

(* Define covariant derivative of Sigma matrix *)
DCS[FF_, mu_] := del[FF, mu] - I * rh[mu] . FF + I * FF . lh[mu];

(* Hermitian conjugate of covariant derivative *)
HCDCS[FF_, mu_] := HC[DCS[FF, mu]];


(*****************************************************************)
(*****************************************************************)
(*                        Lagrangian                             *)
(*****************************************************************)
(*****************************************************************)


(*****************************************************************)
(*                        Kinetic Terms                          *)
(*****************************************************************)

(* Pseudocalar *)
LKineticP := Block[{mu},
    1 / 2 * del[pt, mu] * del[pt, mu] - 1 / 2 * mpt^2 * pt * pt
];

(* DM *)
LKineticDM := Block[{mu},
    I * (xbar . Ga[mu] . del[x, mu] - mx * xbar . x)
];

(* Mesons Kinetic Term *)
LKineticMes := Block[{mu, kinetic},
    kinetic = fpi^2 / 4 * Tr[DCS[Sigma4, mu] . HCDCS[Sigma4, mu]];
    FpiExpand[kinetic, 4]
];

(* Mesons Mass Term *)
LMassMes := b0 * fpi^2 / 2 * Tr[QuarkMassMatrix . (Sigma4 + SigmaDag4)];


(* Photon kinetic term *)
LGauge := Block[{mu, nu},
    -1 / 4 * FS[A, mu, nu] FS[A, mu, nu]
];

(* Photon-l interaction *)
LKineticLep := Block[{m},
    I * (lbar . Ga[m] . DC[l, m] - ml lbar . l)
];

LKinetic := LKineticP + LKineticDM + LKineticMes + LMassMes + LGauge + LKineticLep;



(*****************************************************************)
(*                   Interaction Terms                           *)
(*****************************************************************)

(* p-l interaction *)
LIntPLL := I gpll pt lbar.(ProjP - ProjM).l;

(* p-x interaction *)
LIntPXX := I gpxx * pt * xbar.(ProjP - ProjM).x;

(* Effective interaction between s and photons *)
LIntPFF := Block[{m, n, r, s},
    (* NOTE: Eps[...] in FR has a minus sign relative to P&S and Schwartz!!! *)
    alphaEM / (4 Pi) gpFF pt / vh FS[A, m, n] (1/2 Eps[m, n, r, s] FS[A, r, s])
];

LIntMesPMass := Module[{coeff, interaction},
    coeff = I fpi^2  b0 / 2;

    interaction = coeff pt Tr[(PCouplingMatrix + gpGG/vh QuarkMassMatrix) . (SigmaDag4 - Sigma4)];

    FpiExpand[interaction, 4]
];

(* EM part of Wess-Zumino-Witten Lagrangian. Can ignore everything except the term with pi0 g g, since all others have more fields. *)
LWZW := Block[{coeff, m, n, r, s, term},
    -3 alphaEM / (2 Pi fpi) Eps[m, n, r, s] del[A[r], n] A[s] Tr[QuarkChargeMatrix . QuarkChargeMatrix . del[Phi, m]] (* this is negative since I'm using P&S and Schwartz' sign convention for Eps! *)
];

LInt := LIntPLL + LIntPXX + LIntPFF + LIntMesPMass + LWZW;


(* Full Lagrangian *)
L := LKinetic + LInt;
