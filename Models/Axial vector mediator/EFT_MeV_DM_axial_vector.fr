(* ::Package:: *)

(**********************************************************)
(*                                                        *)
(*  Model for Chiral perturbation Theory at lowest order  *)
(*  Follows Scherer's conventions                         *)
(*                                                        *)
(**********************************************************)

(*
TODO:
-NOTE: earlier versions of FeynRules have a bug where del[..., m] will not work correctly unless Expand is called on its argument or the argument's head is Plus or Minus.
-NOTE: vertices with more than two mesons will be dropped below to speed up model file generation.
-Put in widths!
*)

M$ModelName = "EFT_MeV_DM_axial_vector";

M$Information = {
    Authors -> {"Adam Coogan", "Logan Morrison"},
    Date->"4/27/2018",
    Institutions -> {"UC Santa Cruz"},
    Emails -> {"acoogan@ucsc.edu", "loanmorr@ucsc.edu"},
    Version -> 1
};

(***** Gauge group information *****)
M$GaugeGroups = {
    U1EM == {
        Abelian -> True,
        CouplingConstant -> qe,
        GaugeBoson -> A,
        Charge -> Q
    }
};

(***** Parameter list. ALL UNITS ARE IN GeV! *****)
M$Parameters = {
    fpi == {
        ParameterType -> External,
        Value -> 0.093,
        TeX -> ComposedChar["f", "\\pi"],
        Description->"pion decay constant"
    },

    b0 == {
        ParameterType -> External,
        Description -> "mass term coefficient",
        TeX -> ComposedChar["B", "0"],
        Value -> 2.617 (* ((mpi0 + mpi)/2)^2 / (mu + md) *)
    },

    muq == {
        ParameterType -> External,
        Value -> 0.0024,
        TeX -> ComposedChar["m", "u"],
        Description->"mass of the up quark"
    },

    mdq == {
        ParameterType -> External,
        Value -> 0.0048,
        TeX -> ComposedChar["m", "d"],
        Description->"mass of the down quark"
    },

    msq == {
        ParameterType -> External,
        Value -> 0.095,
        TeX -> ComposedChar["m", "s"],
        Description->"mass of the strange quark"
    },

    alphaEM == {
        ParameterType -> External,
        Value -> 1/137.0,
        TeX -> ComposedChar["\\alpha", "EM"],
        Description -> "fine structure constant for EM"
    },

    me == {
        ParameterType -> External,
        Value -> 0.000511,
        TeX -> ComposedChar["m", "e"],
        Description -> "electron mass"
    },

    mmu == {
        ParameterType -> External,
        Value -> 0.10566,
        TeX -> ComposedChar["m", "\\mu"],
        Description -> "muon mass"
    },

    gall == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "All"],
        Description -> "All coupling"
    },

    gauu == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Auu"],
        Description -> "Auu coupling"
    },

    gadd == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Add"],
        Description -> "Add coupling"
    },

    gass == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "Ass"],
        Description -> "Ass coupling"
    },

    vh == {
        ParameterType -> External,
        TeX -> ComposedChar["v", "H"],
        Description -> "Higgs vev",
        Aalue -> 246.0
    },

    ma == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "A"],
        Description->"mass of A"
    },

    awidth == {
        ParameterType -> External,
        TeX -> ComposedChar["\\Gamma", "A"],
        Description->"width of A"
    },

    gaxx == {
        ParameterType -> External,
        TeX -> ComposedChar["g", "A\\chi\\chi"],
        Description -> "A\[Chi]\[Chi] coupling"
    },

    mx == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "\\chi"],
        Description->"dark matter mass"
    },

    ml == {
        ParameterType -> External,
        TeX -> ComposedChar["m", "l"],
        Description->"SM fermion mass"
    },

    qe == {
        ParameterType -> Internal,
        Value -> Sqrt[4 Pi alphaEM],
        TeX -> "e",
        Description -> "electric coupling constant"
    }
};

(***** Particle classes list ******)
M$ClassesDescription = {
    (* Goldstones *)
    S[1] == {
        ClassName -> pi0,
        SelfConjugate -> True,
        Mass -> {mpi0, 0.13498},
        Width -> 0,
        ParticleName -> "pi0",
        TeXParticleName -> ComposedChar["\\pi", Null, "0"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "0"]
    },

    S[2] == {
        ClassName -> pim,
        SelfConjugate -> False,
        Mass -> {mpi, 0.13957},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "pim",
        AntiParticleName -> "pip",
        TeXParticleName -> ComposedChar["\\pi", Null, "-"],
        TeXAntiParticleName -> ComposedChar["\\pi", Null, "+"],
        PropagatorLabel -> ComposedChar["\\pi", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[3] == {
        ClassName -> k0,
        SelfConjugate -> False,
        Mass -> {mk0, 0.49765},
        Width -> 0,
        ParticleName -> "k0",
        AntiParticleName -> "k0~",
        TeXParticleName -> ComposedChar["K", Null, "0"],
        TeXAntiParticleName -> ComposedChar["K", Null, "0", "\\bar"],
        PropagatorLabel -> ComposedChar["K", Null, "0"],
        PropagatorArrow -> Forward
    },

    S[4] == {
        ClassName -> km,
        SelfConjugate -> False,
        Mass -> {mk, 0.49367},
        QuantumNumbers -> {Q -> -1},
        Width -> 0,
        ParticleName -> "km",
        AntiParticleName -> "kp",
        TeXParticleName -> ComposedChar["K", Null, "-"],
        TeXAntiParticleName -> ComposedChar["K", Null, "+"],
        PropagatorLabel -> ComposedChar["K", Null, "-"],
        PropagatorArrow -> Forward
    },

    S[5] == {
        ClassName -> eta,
        SelfConjugate -> True,
        Mass -> {meta, 0.547862},
        Width -> 0,
        ParticleName -> "eta",
        TeXParticleName -> "\\eta",
        PropagatorLabel -> "\\eta"
    },

    (* Photon *)
    V[1] == {
        ClassName -> A,
        SelfConjugate -> True,
        Mass -> 0,
        Width -> 0,
        ParticleName -> "A",
        PropagatorLabel -> "\\gamma"
    },

    V[2] == {
        ClassName -> Ax,
        SelfConjugate -> True,
        Mass -> mv,
        Width -> awidth,
        ParticleName -> "Ax",
        PropagatorLabel -> "Ax"
    },

    (* SM leptons *)
    F[1] == {
        ClassName        -> vl,
        SelfConjugate    -> False,
        Mass             -> 0,
        Width            -> 0,
        QuantumNumbers   -> {LeptonNumber -> 1},
        PropagatorLabel  -> {"v"},
        PropagatorType   -> S,
        PropagatorArrow  -> Forward
    },

    F[2] == {
        ClassName        -> l,
        SelfConjugate    -> False,
        Mass             -> ml,
        QuantumNumbers   -> {Q -> -1, LeptonNumber -> 1},
        PropagatorLabel  -> {"l"},
        PropagatorType   -> Straight,
        PropagatorArrow  -> Forward
    },

    (* Dark matter *)
    F[3] == {
        ClassName -> x,
        SelfConjugate -> False,
        Mass -> mx,
        Width -> 0,
        ParticleName -> "x",
        AntiParticleName -> "x~",
        TeXParticleName -> "\\chi",
        TeXAntiParticleName -> ComposedChar["\\chi", Null, Null, "\\bar"],
        PropagatorLabel -> "\\chi",
        PropagatorArrow -> Forward
    }
}

(***** Gauge parameters for FeynArts *****)
GaugeXi[V[1]] = GaugeXi[A];
GaugeXi[V[2]] = GaugeXi[Ax];
GaugeXi[S[1]] = 1;
GaugeXi[S[2]] = 1;
GaugeXi[S[3]] = 1;
GaugeXi[S[4]] = 1;
GaugeXi[S[5]] = 1;

(* Need both of these terms to use the pip and kp field names *)
(* Note that FeynRules automatically creates the k0bar conjugate field *)
pip = anti[pim];
pipbar = pim;
kp = anti[km];
kpbar = km;

FpiExpand[expr_, n_] := Normal[Series[expr, {fpi, Infinity, n}]];

commutator[AA_, BB_] := AA . BB - BB . AA;

(* Mass matrix of the light quarks *)
QuarkMassMatrix = DiagonalMatrix[{muq, mdq, msq}];
(* Matrix of quark charges *)
QuarkChargeMatrix = DiagonalMatrix[{2/3, -1/3, -1/3}];
(* Matrix of A-quark couplings *)
AxCouplingMatrix = DiagonalMatrix[{gauu, gadd, gass}];

(*** Set up building blocks for the Lagrangian ***)
(* Matrix of mesons *)
(* Set eta-eta' mixing angle to 0 for now! *)
Phi = {{pi0 + eta / Sqrt[3], Sqrt[2] * pip, Sqrt[2] * kp},
        {Sqrt[2] * pim, -pi0 + eta / Sqrt[3], Sqrt[2] * k0},
        {Sqrt[2] * km, Sqrt[2] * k0bar, -2 * eta / Sqrt[3]}};

(* Golstone Matrix *)
Sigma[order_] := Block[{coeff},
    coeff[n_] := (1 / Factorial[n]) * (I / fpi)^n;
    (* If order is 0, return Identity. Else, do sum up to order. *)
    If[order == 0, IdentityMatrix[3],
    IdentityMatrix[3] + Sum[coeff[n] * MatrixPower[Phi, n], {n, 1, order}]]
];

(* Convenient definitions *)
Sigma2 = Sigma[2];
Sigma3 = Sigma[3];
Sigma4 = Sigma[4];
SigmaDag2 = HC[Sigma[2]];
SigmaDag3 = HC[Sigma[3]];
SigmaDag4 = HC[Sigma[4]];

(* Define left and right handed vector fields *)
EMCurrentL[m_] := qe * QuarkChargeMatrix * A[m];
EMCurrentR[m_] := qe * QuarkChargeMatrix * A[m];

(* Axial vector mediator contribution *)
AxCurrentL[m_] := -Ax[m] AxCouplingMatrix;
AxCurrentR[m_] := Ax[m] AxCouplingMatrix;

lh[m_] := EMCurrentL[m] + AxCurrentL[m];
rh[m_] := EMCurrentR[m] + AxCurrentR[m];

vmu[m_] := 1 / 2 * (rh[m] + lh[m]);
amu[m_] := 1 / 2 * (rh[m] - lh[m]);

(* Define covariant derivative of Sigma matrix *)
DCS[FF_, m_] := del[FF, m] - I * rh[m] . FF + I * FF . lh[m];

(* Hermitian conjugate of covariant derivative *)
HCDCS[FF_, m_] := HC[DCS[FF, m]];

(*****************************************************************)
(*****************************************************************)
(*                        Lagrangian                             *)
(*****************************************************************)
(*****************************************************************)

(*****************************************************************)
(*                        Kinetic Terms                          *)
(*****************************************************************)

(* Axial vector *)
LKineticAx := Block[{m, n, kinetic, mass},
    kinetic = -1 / 4 * FS[Ax, m, n] FS[Ax, m, n];
    mass = ma^2 / 2 * Ax[m] Ax[m];

    kinetic + mass
];

(* DM *)
LKineticDM := Block[{m},
    I * (xbar . Ga[m] . del[x, m] - mx * xbar . x)
];

(* Mesons Kinetic Term *)
LKineticMes := Block[{m, kinetic},
    kinetic = fpi^2 / 4 * Tr[DCS[Sigma4, m] . HCDCS[Sigma4, m]];

    FpiExpand[kinetic, 4]
];

(* Mesons Mass Term *)
LMassMes := b0 * fpi^2 / 2 * Tr[QuarkMassMatrix . (Sigma4 + SigmaDag4)];

(* Photon kinetic term *)
LGauge := Block[{m, n},
    -1 / 4 * FS[A, m, n] FS[A, m, n]
];

(* Neutrino kinetic term *)
LKineticNu := Block[{m},
    I * left[nubar] . Ga[m] . del[left[n], m]
];

(* Photon-l interaction *)
LKineticLep := Block[{m},
    I * (lbar . Ga[m] . DC[l, m] - ml lbar . l)
];

LKinetic := LKineticAx + LKineticDM + LKineticMes + LMassMes + LGauge + LKineticNu +  LKineticLep;


(*****************************************************************)
(*                   Interaction Terms                           *)
(*****************************************************************)

(* A-l interaction *)
LIntALL := Block[{m},
    gall Ax[m] lbar . Ga[m] . (ProjP - ProjM) . l
];

(* A-x interaction *)
LIntAXX := Block[{m},
    gaxx Ax[m] xbar . Ga[m] . (ProjP - ProjM) . x
];

LInt := LIntALL + LIntAXX;

(* Full Lagrangian *)
L := LKinetic + LInt;
